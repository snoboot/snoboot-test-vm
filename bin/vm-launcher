#!/usr/bin/env bash
#
# Starts a VM with qemu.
#
# Environment variables affecting launch:
#
# VM_QEMU:     The qemu instance to use
#              Example: qemu-system-aarch64
#
# VM_ISO:      Path to a (bootable) cdrom image on disk
#              Example: iso/test.iso
#
# VM_ISO_URL:  If the file at VM_ISO doesn't exist yet, it is downloaded from this URL.
#              Example: https://example.com/some.iso
#
# VM_BIOS:     Path to a BIOS image to be used by the emulator
#              Example: iso/QEMU_EFI.fd
#
# VM_BIOS_URL: If the file at VM_BIOS doesn't exist yet, it is downloaded from this URL.
#              Example: https://example.com/bios.fd
#
# VM_HDA:      Path to a local harddisk image
#              Example: disk1.qcow2
#
# VM_HDA_URL:  If the file at VM_HDA doesn't exist yet, it is downloaded from this URL.
#              Example: https://example.com/hda.img
#
#              If the URL starts with "qemu-img-create:", an image is created instead.
#              Example: qemu-img-create:-f qcow2 4G
#
# VM_HDA_RO:   Determines whether the given harddisk image should be accessible read-only.
#              Example: 1
#
# VM_FDA:      Path to a local floppy image
#              Example: fda.img
#              Example: /dev/null
#
# VM_FDA_URL:  If the file at VM_FDA doesn't exist yet, it is downloaded from this URL.
#              Example: https://example.com/fda.img
#
# VM_SSH_PORT: The local port for ssh forwarding
#              Example: 2222
#
# VM_RAM:      Memory to use
#              Example: 2G
#
# VM_MACHINE:  Machine type to use
#              Example: virt
#
# VM_CPU:      CPU to use
#              Example: max
#
# VM_ACCEL:    Hardware acceleration to use
#              Example: hvf
#
# VM_SMP:      Specifies the number of cores for SMP
#              Example: 2
#

abspath() {
  if [[ -d "$1" ]]; then
    cd "$1"
    echo "$PWD"
  else
    dn=$(dirname "$1")
    bn=$(basename "$1")
    cd "$dn"
    dn="$PWD"
    echo "$dn/$bn"
  fi
}

cmd=$(basename "$0")

baseDir=$(abspath $(dirname "$0")/..)
if [[ "$PWD" != "$baseDir" ]]; then
	cd "$baseDir"
fi
mkdir -p run

IFS=$'\n'

if [[ -z "$VM_ID" ]]; then
	id=$(basename "$OLDPWD")
	if [[ "$OLDPWD" == "$PWD/vm/$id" ]]; then
		VM_ID="$id"
	else
		echo "Error: VM_ID not specified, and could not determine" >&2
		exit 1
	fi
fi

if [[ "$VM_ID" == *"/"* ]]; then
	echo "Error: Invalid VM_ID: $VM_ID" >&2
	exit 1
fi

if [[ -z "$VM_VNC" ]]; then
	VM_VNC="unix:$PWD/run/$VM_ID.vnc.sock"
fi

[ -z "$VM_QEMU" ] && VM_QEMU="qemu-system-x86_64"

default_cpu=max
default_machine=
default_sshPort=20022
virtio_net_device=virtio-net-device

extraArgPre=()
case "$VM_QEMU" in
  qemu-system-aarch64)
    default_cpu="cortex-a57"
    default_machine=virt
    extraArgPre=(-nographic)
    ;;
  qemu-system-x86_64)
    #default_cpu="kvm64"
    #default_cpu="kvm64,+spec-ctrl"
    if [[ $(uname -m) == "x86_64" ]]; then
      default_cpu="host"
    else
      default_cpu="kvm64"
    fi
    virtio_net_device=virtio-net-pci
    ;;
  qemu-system-sparc64)
    default_cpu=""
    default_machine="niagara"
    ;;
esac

if [ -z "$VM_ACCEL" ]; then
  # Select the best available hardware acceleration
  accelHelp=$("$VM_QEMU" -accel help)
  for mode in hvf kvm; do
    echo $accelHelp | grep -q -w "$mode"
    if [ $? -eq 0 ]; then
      accel=(-accel $mode)
      break
    fi
  done
else
  accel=(-accel "$VM_ACCEL")
fi

[ -z "$VM_CPU" ] && VM_CPU="$default_cpu"
[ -n "$VM_CPU" ] && cpu=(-cpu "$VM_CPU")

machine=()
[ -z "$VM_MACHINE" ] && VM_MACHINE="$default_machine"
[ -n "$VM_MACHINE" ] && machine=(-machine "$VM_MACHINE")

[ -z "$VM_RAM" ] && VM_RAM=2G
ram=(-m "$VM_RAM")

m=""
[ -n "$VM_MACHINE" ] && m="$VM_MACHINE "
echo "Emulating a $m$VM_CPU system with $VM_RAM RAM"

smp=()
[ -n "$VM_SMP" ] && smp=(-smp "$VM_SMP") && echo "Using SMP: $smp"

bios=()
if [ -n "$VM_BIOS" ]; then
  echo "Using BIOS image: $VM_BIOS"
  if [ ! -e "$VM_BIOS" -a -n "$VM_BIOS_URL" ]; then
    wget -O "$VM_BIOS" "$VM_BIOS_URL" || exit $?
  fi
  bios=(-bios "$VM_BIOS")
fi

hda=()
if [ -n "$VM_HDA" ]; then
  echo "Using hard-disk image: "$(abspath "$VM_HDA")

  if [ ! -e "$VM_HDA" ]; then
    if [[ "$VM_HDA_URL" == qemu-img-create:* ]]; then
      IFS=' ' createArgs=(${VM_HDA_URL/qemu-img-create:})
      qemu-img create "$VM_HDA" ${createArgs[@]} || exit $?
    elif [ -z "$VM_HDA_URL" ]; then
      echo "Harddisk image not found: $VM_HDA" >&2
      exit 1
    else
      wget -O "$VM_HDA" "$VM_HDA_URL" || exit $?
    fi
  fi

  suffix=${name##*.}
  options=""
  case "$suffix" in
    usb)
      format=raw
      ;;
    *)
      ;;
  esac
  [ -n "$format" ] && options+=",format=${format}"
  [[ "$VM_HDA_RO" -gt 0 ]] && options+=",readonly"
  hda=(-drive index=0${options},file="$VM_HDA")
else
  echo "No harddisk image set"
fi

cdrom=()
if [ -n "$VM_ISO" ]; then
  echo "Using ISO cdrom image: "$(abspath "$VM_ISO")
  if [ ! -e "$VM_ISO" -a -n "$VM_ISO_URL" ]; then
    wget -O "$VM_ISO" "$VM_ISO_URL" || exit $?
  fi
  cdrom=(-cdrom "$VM_ISO")
else
  echo "No ISO cdom image set"
fi

floppy=()
if [ -n "$VM_FDA" ]; then
  echo "Using floppy image: "$(abspath "$VM_ISO")
  if [ ! -e "$VM_FDA" -a -n "$VM_FDA_URL" ]; then
    wget -O "$VM_FDA" "$VM_FDA_URL" || exit $?
  fi
  floppy=(-fda "$VM_FDA")

  if [ "$VM_FDA" == "/dev/null" ]; then
      if [[ "$VM_QEMU" != "qemu-system-sparc64" ]]; then
          floppy+=(-no-fd-bootchk)
      fi
  fi
else
  echo "No floppy image set"
fi

if [[ -z "$VM_NETWORK_SUBNET" ]]; then
  VM_NETWORK_SUBNET=240.42.0.0/24
fi

vnc=()
if [[ -n "$VM_VNC" && "$VM_VNC" != "off" ]]; then
	vnc=(-vnc "$VM_VNC")
fi

[ -z "$VM_SSH_PORT" ] && VM_SSH_PORT="$default_sshPort"
net=(-device "$virtio_net_device",netdev=net0 -netdev user,id=net0,net="$VM_NETWORK_SUBNET",hostfwd=tcp::${VM_SSH_PORT}-:22)
echo "Forwarding local port $VM_SSH_PORT to VM's ssh server (port 22)"

lsof -t -i "TCP:$VM_SSH_PORT" -s TCP:LISTEN >/dev/null && echo "\nError: Can't listen on port $VM_SSH_PORT (already taken).\nPlease specify a free port with VM_SSH_PORT=nnnn $cmd $@\n" >&2

if [[ -n "$VM_VNC_LOCAL_EXEC" && "$VM_VNC" == "unix:"* ]]; then
      # example: export VM_VNC_LOCAL_EXEC="/Applications/TigerVNC Viewer 1.12.0.app/Contents/MacOS/TigerVNC Viewer"
    (
      sleep 1
      "$VM_VNC_LOCAL_EXEC" ${VM_VNC/unix:/}
    ) &
fi

#exec "$VM_QEMU" -device vhost-vsock-pci,guest-cid=3 -vnc unix:/tmp/qemu-vnc ${extraArgPre[@]} -accel tcg ${accel[@]} ${cpu[@]} ${machine[@]} ${ram[@]} ${smp[@]} ${bios[@]} ${hda[@]} ${net[@]} ${floppy[@]} ${cdrom[@]} -boot order=cd
#exec "$VM_QEMU" -vnc unix:/tmp/qemu-vnc ${extraArgPre[@]} -accel tcg ${accel[@]} ${cpu[@]} ${machine[@]} ${ram[@]} ${smp[@]} ${bios[@]} ${hda[@]} ${net[@]} ${floppy[@]} ${cdrom[@]} -boot order=cd
exec "$VM_QEMU" ${vnc[@]} ${extraArgPre[@]} ${accel[@]} ${cpu[@]} ${machine[@]} ${ram[@]} ${smp[@]} ${bios[@]} ${hda[@]} ${net[@]} ${floppy[@]} ${cdrom[@]} -boot order=cd
